version: "3.9"

services:
  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    command:
      - "--providers.docker.network=default"
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - '--api.dashboard=true'
      - '--api.debug=true'
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.r53.acme.dnschallenge.provider=route53"
      - "--certificatesresolvers.r53.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      # - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      # - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    labels:
      - 'traefik.http.routers.traefik.rule=Host(`traefik.parham.in`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"'
      - 'traefik.http.routers.traefik.service=api@internal'
      - 'traefik.http.routers.traefik.entrypoints=web'
      # - 'traefik.http.routers.traefik.entrypoints=websecure'
      - 'traefik.http.services.traefik.loadBalancer.server.port=8080'
      # - "traefik.http.routers.traefik.tls.certresolver=r53"
      # - "traefik.http.routers.traefik.tls=true"
    env_file:
      - .env
    environment:
      - AWS_ACCESS_KEY_ID=${ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${SECRET_KEY}
      - AWS_HOSTED_ZONE_ID=${HOSTED_ZONE}
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    restart: unless-stopped

  whoami:
    image: "traefik/whoami"
    container_name: "whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.parham.in`)"
      - "traefik.http.routers.whoami.entrypoints=web"
      # - "traefik.http.routers.whoami.entrypoints=websecure"
      # - "traefik.http.routers.whoami.tls.certresolver=r53"
      # - "traefik.http.routers.whoami.tls=true"
    restart: unless-stopped
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    environment:
      TZ: 'Asia/Kolkata'
      WEBPASSWORD: 'password'
    # Volumes store your data between container upgrades
    volumes:
      - './etc-pihole:/etc/pihole'
      - './etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`pihole.parham.in`)"
      # - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.entrypoints=web"
      - 'traefik.http.middlewares.pihole.addprefix.prefix=/admin'
      - 'traefik.http.services.pihole.loadBalancer.server.port=80'
      # - "traefik.http.routers.pihole.tls.certresolver=r53"
      # - "traefik.http.routers.pihole.tls=true"
  ptagent:
    image: portainer/agent:2.18.4
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    restart: unless-stopped
  portainer:
    image: portainer/portainer-ce:2.18.4
    command: -H tcp://ptagent:9001 --tlsskipverify --http-enabled
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.portainer.rule=Host(`portainer.parham.in`)'
      - 'traefik.http.services.portainer.loadbalancer.server.port=9000'
      # - 'traefik.http.routers.portainer.entrypoints=websecure'
      - 'traefik.http.routers.portainer.entrypoints=web'
      # - "traefik.http.routers.portainer.tls.certresolver=r53"
      # - "traefik.http.routers.portainer.tls=true"
    volumes:
      - portainer_data:/data
    restart: unless-stopped
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    networks:
      ipvlan:
        ipv4_address: 192.168.1.200
      default: {}
    ports:
      - 7359:7359/udp
      - 1900:1900/udp
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
      - JELLYFIN_PublishedServerUrl=https://jellyfin.parham.in
    volumes:
      - /mnt/library/jellyfin:/config
      - /mnt/library/Movies:/data/movies
      - /mnt/library/TV:/data/tv
    restart: 'unless-stopped'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.jellyfin.rule=Host(`jellyfin.parham.in`)'
      - 'traefik.http.routers.jellyfin.entrypoints=web'
      # - 'traefik.http.routers.jellyfin.entrypoints=websecure'
      - 'traefik.http.services.jellyfin.loadbalancer.server.port=8096'
      # - "traefik.http.routers.jellyfin.tls.certresolver=r53"
      # - "traefik.http.routers.jellyfin.tls=true"
  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
      - DOCKER_MODS=linuxserver/mods:transmission-floodui
    volumes:
      - /mnt/library:/downloads
    ports:
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.transmission.rule=Host(`transmission.parham.in`)'
      - 'traefik.http.routers.transmission.entrypoints=web'
      # - 'traefik.http.routers.transmission.entrypoints=websecure'
      - 'traefik.http.services.transmission.loadbalancer.server.port=9091'
      # - "traefik.http.routers.transmission.tls.certresolver=r53"
      # - "traefik.http.routers.transmission.tls=true"
volumes:
  portainer_data: {}

networks:
  ipvlan:
    driver: ipvlan
    driver_opts:
      parent: eno1 # replace with your host interface / vlan to use
    ipam:
      config:
        - subnet: 192.168.1.0/24
